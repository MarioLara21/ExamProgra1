PushAll Macro 
       push      ax		                     ;Guarda los todos los registro en... 
       push      bx		                     ;...la pila del programa.
       push      cx		                     ;Preparaci�n para rutinas
       push      dx		                     ;Debe tener cuidado de llamar a la...
       push      si		                     ;...siguiente macro (PopAllRegs) para...
       push      di		                     ;poner equilibrar la pila...
       pushf			                     ;Guarda el registro de banderas en la pila.
EndM				                     ;Su contra parte es la macro siguiente. 

PopAll Macro
       popf		                            ;...la pila del programa.
       pop       di		                     ;...llamado antes a pushallregs.
       pop       si		                     ; Sino se produce un error en el programa.
       pop       dx
       pop       cx
       pop       bx
       pop       ax
EndM

PushA Macro 
       push      ax		                     ;Guarda los todos los registro en... 
       push      bx		                     ;...la pila del programa.
       push      cx		                     ;Preparaci�n para rutinas
       push      dx		                     ;Debe tener cuidado de llamar a la...
       push      si		                     ;...siguiente macro (PopAllRegs) para...
       push      di		                     ;poner equilibrar la pila...
       push      bp		                     ;...sino lo hace el programa se cae...
       push      sp		                     ;...y da un error.
       push      ds		                     ;Note que el �ltimo elemento del pushallregs...
       push      es		                     ;...es el primer elemento en salir en popallregs.
       push      ss
       pushf			                     ;Guarda el registro de banderas en la pila.
EndM				                     ;Su contra parte es la macro siguiente. 

PopA Macro
       popf		                            ;...la pila del programa.
       pop       ss	                            ;Esto se hace despu�s de la llamada a una rutina
       pop       es	                            ;Debe tener cuidado de llamar a esta...
       pop       ds	                            ;...macro (PopAllRegs) para...
       pop       sp	                            ;poner equilibrar la pila...
       pop       bp		                     ;...solamente despu�s de haber...
       pop       di		                     ;...llamado antes a pushallregs.
       pop       si		                     ; Sino se produce un error en el programa.
       pop       dx
       pop       cx
       pop       bx
       pop       ax
EndM
   
ClearScreen Macro TextColor
       PushA
       mov       ah,07		              ;Prepara servicio 07 para la int 10h. (desplazamiento de ventana hacia abajo).
       mov       al,25		              ;N�mero de l�neas por desplazar en este caso total de filas 25.
       mov       bh,TextColor	              ;Atributo con que se va a desplazar; es decir; color. 00 = negro.
       mov       ch,00		              ;En donde comienza: fila de la esquina superior izquierda.
       mov       cl,00		              ;En donde comienza: columna de la esquina superior izquierda.
       mov       dh,25		              ;En donde termina:  fila de la esquina inferior derecha.
       mov       dl,80		              ;En donde termina:  columna de la esquina inferior derecha.
       int       10h		                     ;ejecute la int 10h/ servicio 07h, desplaze la ventana hacia abajo.
       PopA
EndM

PrintfS Macro String
       lea       dx,String                       ;Coloca la direcci�n del desplazamiento de la etiqueta DS:Message 
       mov       ah,09                           ;par�metro 09 del servicio de int 21 (imprimir en pantalla cadena terminada en $)
       int       21h                             ;ejecute la interrupci�n, e imprima en pantalla.
EndM

PrintfC Macro Caracter, Atributo
       PushA     	                            ;Guarde todos los registros.
       mov       ah,09                           ;Servicio de int 21h / 02 imprimir un caracter en pantalla.
       mov       dl,Caracter                     ;Caracter Ascii a imprimir.
       mov       bh,00
       mov       bl,Atributo
       and       bl,00001111b
       mov	   cx,1
       int       10h                             ;ejecute la interrupci�n, e imprima en pantalla.
       PopA     	    	                     ;Saque todos los registros.
EndM

GotoXY Macro X,Y
       PushA
       mov     ah,02
       mov	 bh,00
       mov	 dl,X
       mov	 dh,Y
       int 	 10h
       PopA
EndM

WhereXY Macro 
       PushA
       mov	 ah,03
       mov	 bh,00
       int	 10h
       mov	 Col,dl
       mov	 Fil,dh
       PopA
EndM

PrintHex Macro Numero
       local     hex, exit
       PushA
       mov       al,Numero
       cmp       al,09h
       jnle      hex 
       add       al,48
       PrintfC   al,Numero
       jmp short exit 
   hex: add       al,55  
       PrintfC   al,Numero
 exit: PopA
EndM

ListPush  Macro lista
	IRP i,<lista>          			; I recorre toda la lista ingresada
		Push i 				; Mete a i en la pila
	EndM
EndM

ListPop	 Macro lista
	IRP i,<lista> 				; I recorre toda la lista ingresada
		Pop i 					; Saca a i en la pila
	EndM
EndM

PushA Macro
	ListPush <Ax,Bx,Cx,Dx,Si,Di,Bp,Sp,ds,es,ss> ;Mete los registros a la pila
	pushf 						;  Mete las banderas a la pila
EndM

IniciarSegDatos Macro datos
	mov     ax,datos                                 ; Pasa el segmento dado al ax
       mov     ds,ax                                    ; Pasa el segmento dado desde el ax al ds
EndM

RetornaControl Macro
	mov 	ax,4c00h								
	int 	21h 					; ejecuta la interrupción
EndM

ImpString Macro Mensaje                        
       mov ah, 09h                               ;Carga los datos para la interrupción 
       mov dx, offset mensaje                    ;Lee todo mensaje
       int 21h                                   ;Interrupción que imprime
EndM
EncontrarNombre Macro 				;Va sacando del ES caracter a caracter el nombre del archivo
    add di,3d                     
    ciclo:
     	mov 	al, byte ptr es:[si]               ;Mueve el primer caracter al al		
     	cmp 	al,0h 				       ;Si es igual a cero es que llegó al final
     	jz 	print				       ;Va a la etiqueta del final
	mov 	byte ptr nombArch[di],al           ;Si no va a la etiqueta sigue con el ciclo agregando el caracter siguiente
     	inc 	di 					;Incrementa la posición de donde guarda la variable
     	inc 	si 					;Incremente el si para poder sacar el siguiente caracter
     	jmp    ciclo 						
    print:
    	 push di      
        IniciarSegDatos datos
EndM

cargarNombre Macro  					;Verifica que el argumento no esté vacío ante de llamar a buscar
  	 inc si                                   ;el nombre  
    	 mov si,82h
    	 mov al, byte ptr es:[si] 
    	 cmp al,0h 
		 jz cerrar
		 jmp hay
	cerrar: 
		 mostrarAyuda
		 cerrarDos
	hay:
    	 buscarNombre
EndM
CerrarArchivo Macro 					
	mov		bx,handle
	mov		ah,3eh 
	int 	21h
EndM
LeerArchivo Macro num , destino			
	mov 	ah,3fh 				
	mov 	bx,handle
	mov 	cx,num

	mov 	dx,offset destino		
	int 	21h
	xor 	ax,ax
	mov 	ah,09h
	mov 	bl,09h 				 
	xor 	bh,bh 					
	mov 	cx,200h
	int 	10h
	int 	21h
EndM
AbrirArch Macro arch
	local ErrorAbrir,SalirAbrir				
 	mov 	ah,3Dh				
	mov 	al,02h	
	mov 	dx,offset arch		
	int 	21h
	mov 	handle,ax
	cmp 	ax,2h 					
	jz 		ErrorAbrir 		
	jmp 	short salirAbrir 			
	ErrorAbrir:
		ImprimeString msmErrorAbrir,0ch 	 
		CerrarDOS 				
endM
CargarBMP macro
   mov ah,4fh 
   mov al,10h
   mov bx,101h
   int 10h
   mov ah,4fh
   mov al,05h
   mov bh,00h
   mov bl,00h
   mov dx,4
   int 10h
   mov	ah,3dh  
   mov	al,00
   mov	dx,offset nombArch
   int	21h     
   mov	handle,ax
   mov	ah,3fh  
   mov	bx,handle
   mov	cx,54
   mov	dx,offset params
   int	21h     
   mov	col,0  
G1:;23
   mov	ah,3fh
   mov	bx,handle
   mov	cx,4
   mov	dx,offset param
   int	21h
   mov	al,col
   mov	dx,3c8h
   out	dx,al
   mov	al,param.red
   shr	al,2
   mov	dx,3c9h
   out	dx,al
   mov	al,param.green
   shr	al,2
   out	dx,al
   mov	al,param.blue
   shr	al,2
   out	dx,al
   cmp	col,255
   inc	col
   jne	G1B        
G1B:;45
   jmp G1
A1:
   mov	ah,3fh  
   mov	bx,handle
   mov	cx,640
   mov	dx,offset col
   int	21h     
   mov	si,offset col
A2:;54
   ponerPixel
   inc	X
   cmp	X,280h
   jne A2B
   mov	X,0h
   dec	Z
   cmp	Z,-1
   jne	A1B
   mov	ah,3eh
   mov	bx, handle
   int 21h 
A1B:;66
   jmp A1
A2B:
   jmp A2
endM;70
ponerPixel macro  
   mov	ax,Z 
   mul	multi
   mov	buff,ax  
   mov	ax,100
   mul	buff
   mov	buff,ax
   mov	buff+2,dx
   mov	ax,Z   
   mul multi+2
   mov	buff+4,ax
   mov	ax,10
   mul	buff+4
   mov	buff+4,ax
   mov	buff+6,dx
   mov	ax,buff 
   add	ax,buff+4
   mov	buff,ax
   mov	ax,buff+2
   adc	ax,buff+6
   mov	buff+2,ax
   mov	ax,X  
   add	buff,ax
   adc	buff+2,0   
   mov	ax,buff
   mov	dx,buff+2
   mov	cx,16       
F1:   sar   dx,1
      rcr   ax,1
      loop  F1
      mov   num,ax
      mov   ax,y   
      cmp   ax,Z
      je    pass
      mov   ax,y+2
      cmp   ax,Z
      je    pass
      mov   ax,y+4
      cmp   ax,Z
      je    pass
      mov   ax,y+6
      cmp   ax,Z
      je    pass
      mov   ax,y+8
      cmp   ax,Z
      je    pass
      mov   ax,y+10
      cmp   ax,Z
      je    pass
      mov   ax,y+12
      cmp   ax,Z
      je    pass
      mov   ax,y+14
      cmp   ax,Z
      jne   bypass
pass:
   mov ah,4fh   
	mov al,05h
	mov bh,00h
	mov bl,00h
	mov dx,num
	int 10h

bypass:

	mov ax,0A000h     
	mov es,ax
	mov ax,buff
	mov di,ax
	mov al,[si]
	stosb  ; Es igual a ES:DI,[AL]
	inc si
       ret
endM